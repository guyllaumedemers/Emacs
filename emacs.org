#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome!

Here is a emacs config derived from systemcrafters.cc= that customize further your emacs experience in a MS Windows environment. %HOME% & %PATH% environment variables will be configure following the [[https://caiorss.github.io/Emacs-Elisp-Programming/Emacs_On_Windows.html][caiorss.github.io]] tutorial.

* System Config

** Chocolatey (distribution service - package manager)

Chocolatey is a machine-level, command-line package manager and installer for software on Microsoft Windows. It uses the NuGet packaging infrastructure and Windows PowerShell to simplify the process of downloading and installing software.

#+begin_src emacs-lisp

  ;; run shell command to download chocolatey

#+end_src

** Env PATH

The HOME environment variable that has the default value /home/<username>) on Linux sets the user's directory path. This variable, which is equivalent to _%USERPROFILE% _(C:\\Users\<username> ) is expected to be set by many Unix
applications ported to Windows and it also makes directory browser in Emacs and shells easier.

#+begin_src emacs-lisp

  ;;setx HOME "%HOME%" 

#+end_src

Executables located in directories listed in PATH environment variable can be invoked without its full path like ls, echo and who in Unix-like OS or ipconfig, arp and whoami in Windows. C:\Users\arch\bin> echo %PATH%
C:\ProgramData\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem...

By adding the directory ~/bin or C:\Users\<user>\bin to PATH variable it makes easir to call command line applications from this directory without specifing its full path from Emacs or shell (cmd.exe).

#+begin_src emacs-lisp

  ;;setx PATH "%PATH%;%USERPROFILE%\bin"

#+end_src

** Git (distributed version control system)

#+begin_src emacs-lisp

  ;; run chocolatey install git

#+end_src

** Gh CLI

gh cli allow creation of repo on the upstream using the command line.

#+begin_src emacs-lisp

  ;; run chocolatey install gh

  ;;# create a repository interactively
  ;;gh repo create

  ;;# create a new remote repository and clone it locally
  ;;gh repo create my-project --public --clone

  ;;# create a remote repository from the current directory
  ;;gh repo create my-project --private --source=. --remote=upstream 

#+end_src

** Compilation Keybindings

Handy key bindings for invoking compilation command.

#+begin_src emacs-lisp

  (progn
    (global-set-key (kbd "<f9>") #'compile)
    (global-set-key (kbd "<C-f9>")
		    (lambda () (interactive)
		    (save-buffer)
		    (recompile))))

#+end_src

** Console/Shell

Various command to run in emacs.

#+begin_src emacs-lisp

  ;; M-x run-bash
  (defun run-bash ()
    (interactive)
    (let ((shell-file-name "C:\\Program Files\\Git\\bin\\bash.exe"))
	(shell "*bash*")))

  ;; M-x run-cmdexe
  (defun run-cmdexe ()
    (interactive)
    (let ((shell-file-name "cmd.exe"))
      (shell "*cmd.exe*")))

  ;; M-x run-powershell
  (defun run-powershell ()
    "Run powershell"
    (interactive)
    (async-shell-command "c:/windows/system32/WindowsPowerShell/v1.0/powershell.exe -Command -"
			 nil
			 nil))

#+end_src

** Visual C++ MSVC Building Tools

Calling the default and official Windows' C++ compiler MSVC (Microsoft Visual C++) from command line is not easy as calling gcc, mingw or clang as MSVC needs environment variables INCLUDE, LIB, LIBPATH and PATH to be properly set with correct paths.

#+begin_src emacs-lisp

;;  (defvar msbuild-old-path-var (getenv "PATH"))
;;
;;  ;; The command below sets enviroment variable for MSVC - 2017 and x64 building target
;;  (defun msbuild-2017-x64-setup ()
;;    "Set enviorment variables to load Microsoft Visual C++ Compiler (MSVC) 64 bits"
;;    (interactive)
;;    (message "Setting 64 bits building tools.")
;;    (setenv "PATH" msbuild-old-path-var)
;;    (setenv "INCLUDE"
;;	    (concat
;;	     "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/include"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/include"
;;	     ";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/include/um"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/ucrt"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/shared"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/um"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/include/10.0.16299.0/winrt"
;;	     ))
;;
;;    (setenv "LIB"
;;	    (concat
;;	     "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x64"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64"
;;	     ";" "C:/Program Files (x86)/Windows Kits/NETFXSDK/4.6.1/lib/um/x64"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/ucrt/x64"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/lib/10.0.16299.0/um/x64"             
;;	     ))
;;
;;    (setenv  "LIBPATH"
;;	     (concat
;;	      "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/ATLMFC/lib/x64"
;;	      ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64"
;;	      ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/lib/x64/store/references"
;;	      ";" "C:/Program Files (x86)/Windows Kits/10/UnionMetadata/10.0.16299.0"
;;	      ";" "C:/Program Files (x86)/Windows Kits/10/References/10.0.16299.0"
;;	      ";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
;;	      ))
;;
;;    (setenv "PATH"
;;	    (concat
;;	     (getenv "PATH")
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.12.25827/bin/HostX86/x64"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/VC/VCPackages"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TestWindow"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/MSBuild/15.0/bin/Roslyn"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Team Tools/Performance Tools"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/Shared/Common/VSPerfCollectionTools/"
;;	     ";" "C:/Program Files (x86)/Microsoft SDKs/Windows/v10.0A/bin/NETFX 4.6.1 Tools/"
;;	     ";" "C:/Program Files (x86)/Microsoft SDKs/F#/4.1/Framework/v4.0/"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/bin/x64"
;;	     ";" "C:/Program Files (x86)/Windows Kits/10/bin/10.0.16299.0/x64"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community//MSBuild/15.0/bin"
;;	     ";" "C:/Windows/Microsoft.NET/Framework/v4.0.30319"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/IDE/"
;;	     ";" "C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/Common7/Tools/"
;;	     )))

  ;; commands to compile file related to current c++ buffer.
  (defun compile-msvc-x64 ()
    (interactive)
    (msbuild-2017-x64-setup)
    (let ((compile-command (format "cl.exe \"%s\""
				   (file-name-nondirectory (buffer-file-name))))
	  (compilation-ask-about-save nil))
      (call-interactively #'compile )))

#+end_src

** Custom.el

set package customization to a different file to prevent poluting the init.el

#+begin_src emacs-lisp

  (progn
    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (when (file-exists-p custom-file)
      (load custom-file)))

#+end_src

** Backup files

set temporary files to a different directory

#+begin_src emacs-lisp

  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))

#+end_src

** Recycle Bin

The following line configures Emacs so that files deleted via Emacs are moved to the Recycle.

#+begin_src emacs-lisp

  (setq delete-by-moving-to-trash t) 

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; init package sources
  (when (require 'package nil 'noerror)
      (setq package-archives '(
			       ("melpa" . "https://melpa.org/packages/")
			       ("org" . "https://orgmode.org/elpa/")
			       ("elpa" . "https://elpa.gnu.org/packages/")))
      (package-initialize)
      ;; refresh archive description list
      (unless package-archive-contents (package-refresh-contents)))

  ;; install/update use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (when (require 'use-package nil 'noerror)
    (setq use-package-always-ensure t))

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  ;; set default emacs config
  (progn
    (setq inhibit-startup-message t)
    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10)        ; Give some breathing room
    (menu-bar-mode -1)          ; Disable the menu bar
    (setq visible-bell t)       ; Set up the visible bell
    (setq use-file-dialog nil)
    (setq use-dialog-box nil)
    (add-to-list 'default-frame-alist '(fullscreen . maximized)) 
    (column-number-mode)
    (global-display-line-numbers-mode t)
    (setq-default buffer-file-coding-system 'utf-8-unix)
    ;; Disable line numbers for some modes
    (dolist (mode '(
		    org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    treemacs-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0)))))

#+end_src

* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
     :config
     (general-create-definer rune/leader-keys
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
       :global-prefix "C-SPC")

     (rune/leader-keys
       "t"  '(:ignore t :which-key "toggles")
       "tt" '(counsel-load-theme :which-key "choose theme"))) 

   (use-package evil
     :init
     (setq evil-want-integration t)
     (setq evil-want-keybinding nil)
     (setq evil-want-C-u-scroll t)
     (setq evil-want-C-i-jump nil)
     :config
     (evil-mode 1)
     (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
     (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

     ;; Use visual line motions even outside of visual-line-mode buffers
     (evil-global-set-key 'motion "j" 'evil-next-visual-line)
     (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

     (evil-set-initial-state 'messages-buffer-mode 'normal)
     (evil-set-initial-state 'dashboard-mode 'normal))

   (use-package evil-collection
     :config
     (evil-collection-init))
  
#+end_src

* UI Configuration

** Fonts

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] font for this configuration which will more than likely need to be installed on your machine.

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  (progn
    (defvar efs/default-font-size 96)
    (defvar efs/default-variable-font-size 96)
    ;;choco install firacode
    (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)
    (set-face-attribute 'variable-pitch nil :font "Fira Code Retina" :height efs/default-variable-font-size :weight 'regular))

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-dracula t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package doom-modeline
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :diminish which-key-mode
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

   (use-package ivy
     :diminish
     :bind (("C-s" . swiper)
	    :map ivy-minibuffer-map
	    ("TAB" . ivy-alt-done)
	    ("C-l" . ivy-alt-done)
	    ("C-j" . ivy-next-line)
	    ("C-k" . ivy-previous-line)
	    :map ivy-switch-buffer-map
	    ("C-k" . ivy-previous-line)
	    ("C-l" . ivy-done)
	    ("C-d" . ivy-switch-buffer-kill)
	    :map ivy-reverse-i-search-map
	    ("C-k" . ivy-previous-line)
	    ("C-d" . ivy-reverse-i-search-kill))
     :config
     (ivy-mode 1))

  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))

   (use-package ivy-rich
     :init
     (ivy-rich-mode 1))

   (use-package counsel
     :bind (("C-M-j" . 'counsel-switch-buffer)
	    :map minibuffer-local-map
	    ("C-r" . 'counsel-minibuffer-history))
     :config
     (counsel-mode 1))

#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
		    (org-level-2 . 1.1)
		    (org-level-3 . 1.05)
		    (org-level-4 . 1.0)
		    (org-level-5 . 1.1)
		    (org-level-6 . 1.1)
		    (org-level-7 . 1.1)
		    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Fira Code Retina" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agendas and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (efs/org-font-setup))

#+end_src

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages 'org-babel-load-languages
                               '((emacs-lisp . t)))

#+end_src

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (when (require 'org-tempo nil 'noerror)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp")))

#+end_src

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

* Development

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

** Commenting

Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* IDE Features with lsp-mode

** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (c-mode . lsp-deferred)
           (c++-mode . lsp-deferred)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration)
           (lsp-mode . efs/lsp-mode-setup))
    :commands (lsp lsp-deferred))

  ;; The path to lsp-mode needs to be added to load-path as well as the
  ;; path to the `clients' subdirectory.
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))

  ;; optionally if you want to use debugger
  ;; (use-package dap-mode)
  ;; ;; (use-package dap-LANGUAGE) to load the dap adapter for your language

#+end_src

*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (defun efs/toggle-treemacs ()
    (treemacs)
    (lsp-treemacs-symbols))

  (use-package lsp-treemacs
    :hook (lsp-mode . efs/toggle-treemacs)
    :config (lsp-treemacs-sync-mode t))

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package company-c-headers
    :config (add-to-list 'company-backends 'company-c-headers)
    (progn
      (setq system_path (cl-remove-duplicates (split-string (getenv "PATH") ";") :test 'string=))
      (dolist (elem system_path)
        (when (string-match "[a-zA-Z0-9\\\/\.\:\_\+\-]*mingw[a-zA-Z0-9\\\/\.\:\_\+\-]*" elem)
          (setq temp_var elem)
          (add-to-list 'company-c-headers-path-system temp_var)))))

#+end_src
